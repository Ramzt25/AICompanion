#!/bin/bash
# AI Companion - Demo Deployment Script
# Shows the local deployment process with explanations

set -e

# Colors
GREEN='\033[0;32m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
YELLOW='\033[1;33m'
NC='\033[0m'

echo -e "${BLUE}üé¨ AI Companion Local Deployment Demo${NC}"
echo -e "${BLUE}=====================================${NC}"
echo ""

echo -e "${CYAN}This demo shows how to deploy AI Companion locally for testing.${NC}"
echo -e "${CYAN}The deployment scripts handle everything automatically!${NC}"
echo ""

echo -e "${GREEN}üìã What you'll need:${NC}"
echo "  ‚úÖ Docker & Docker Compose"
echo "  ‚úÖ Node.js 18+"
echo "  ‚úÖ pnpm package manager"
echo "  ‚úÖ OpenAI API key"
echo ""

echo -e "${GREEN}üöÄ Available deployment options:${NC}"
echo ""

echo -e "${YELLOW}Option 1: Bash Script (Linux/macOS)${NC}"
echo "  ./deploy.sh start                 # Full setup and start"
echo "  ./deploy.sh start --detached      # Run in background"
echo "  ./deploy.sh status                # Check system status"
echo "  ./deploy.sh stop                  # Stop all services"
echo "  ./deploy.sh cleanup --force       # Reset everything"
echo ""

echo -e "${YELLOW}Option 2: PowerShell (Windows/Linux/macOS)${NC}"
echo "  ./deploy.ps1 start                # Full setup and start"
echo "  ./deploy.ps1 start -Detached      # Run in background"  
echo "  ./deploy.ps1 status               # Check system status"
echo "  ./deploy.ps1 stop                 # Stop all services"
echo "  ./deploy.ps1 cleanup -Force       # Reset everything"
echo ""

echo -e "${YELLOW}Option 3: Windows Batch${NC}"
echo "  deploy.bat start                  # Uses PowerShell internally"
echo ""

echo -e "${GREEN}üîç Health monitoring:${NC}"
echo "  ./health-check.sh                 # Basic health check"
echo "  ./health-check.sh --deep          # Deep validation with API tests"
echo "  ./health-check.sh --fix           # Auto-fix common issues"
echo "  ./health-check.ps1                # PowerShell version"
echo ""

echo -e "${GREEN}üéØ What happens during deployment:${NC}"
echo ""
echo "  1Ô∏è‚É£  Check prerequisites (Docker, Node.js, pnpm)"
echo "  2Ô∏è‚É£  Create .env.local with sensible defaults"
echo "  3Ô∏è‚É£  Install dependencies with pnpm"
echo "  4Ô∏è‚É£  Start PostgreSQL + Redis containers"
echo "  5Ô∏è‚É£  Wait for services to be ready"
echo "  6Ô∏è‚É£  Run database migrations"
echo "  7Ô∏è‚É£  Seed demo data with test users"
echo "  8Ô∏è‚É£  Start Next.js application"
echo "  9Ô∏è‚É£  Health check and display access URLs"
echo ""

echo -e "${GREEN}üé™ Pre-configured test users:${NC}"
echo "  üë§ John Doe (Personal): john.doe@example.com"
echo "  üë§ Sarah Wilson (Enterprise): sarah.wilson@acmecorp.com"
echo "  üë§ Michael Chen (Admin): admin@acmecorp.com"
echo ""

echo -e "${GREEN}üåê Access URLs after deployment:${NC}"
echo "  üè† Main Application: http://localhost:3000"
echo "  üêò PostgreSQL: localhost:5432"
echo "  üì° Redis: localhost:6379"
echo ""

echo -e "${CYAN}üí° Pro Tips:${NC}"
echo "  ‚Ä¢ Use '--detached' for background development"
echo "  ‚Ä¢ Run health checks regularly to catch issues"
echo "  ‚Ä¢ Check logs first when troubleshooting"
echo "  ‚Ä¢ Keep .env.local secure - never commit API keys"
echo ""

echo -e "${YELLOW}üöÄ Ready to start? Run one of these commands:${NC}"
echo ""
echo -e "${GREEN}  ./deploy.sh start${NC}        ${CYAN}# Linux/macOS users${NC}"
echo -e "${GREEN}  ./deploy.ps1 start${NC}       ${CYAN}# PowerShell users${NC}"
echo -e "${GREEN}  deploy.bat start${NC}         ${CYAN}# Windows CMD users${NC}"
echo ""

echo -e "${BLUE}üìñ For detailed documentation, see:${NC}"
echo "  ‚Ä¢ QUICK_START.md - Step-by-step deployment guide"
echo "  ‚Ä¢ LOCAL_DEVELOPMENT.md - Development workflow"
echo "  ‚Ä¢ COMPREHENSIVE_REPORT.md - Platform capabilities"
echo ""

echo -e "${GREEN}Happy coding! ü§ñ‚ú®${NC}"